var documenterSearchIndex = {"docs":
[{"location":"examples.html#","page":"Examples","title":"Examples","text":"Let's load the package, an SDP solver, and define a simple plotting routine.","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"using GuessworkQuantumSideInfo\nusing SCS, Plots\nget_sdp_solver() = SCSSolver(verbose=false)\nplot_pmfN(data) = bar(pmfN(data); xlabel=\"Guess number\", ylabel=\"Probability of guessing correctly\", legend = false)","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"Next, we define some basic qubit states.","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"dB = 2\nketplus = (ket(1, dB) + ket(2,dB))/sqrt(2)\nketminus = (ket(1, dB) - ket(2,dB))/sqrt(2)\nketzero = ket(1, dB)\nketone = ket(2, dB)","category":"page"},{"location":"examples.html#Example-1:-A-warmup-with-trivial-examples-1","page":"Examples","title":"Example 1: A warmup with trivial examples","text":"","category":"section"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"Let's consider the case with J=2 and both states are the same. The side information is therefore completely uninformative, and the guesswork is","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"G(XB) = frac12cdot 1 + frac12 cdot 2 = 15","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"We can check this:","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"p = [0.5, 0.5]\nρBs = dm.([ ketzero, ketzero  ])\noutput = guesswork(p, ρBs; solver = get_sdp_solver());\noutput.optval","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"We see the result agrees with 1.5, as we expected. Likewise, if we choose the two states as $ |0\\rangle, |1\\rangle$, we can get it in one guess every time, of course, since they are orthogonal:","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"p = [0.5, 0.5]\nρBs = dm.([ ketzero, ketone  ])\noutput = guesswork(p, ρBs; solver = get_sdp_solver());\noutput.optval","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"We can inspect the POVMs:","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"output.Es","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"As we would expect, we (approximately) obtain the projection onto 0 rangle and the projection onto 1 rangle.","category":"page"},{"location":"examples.html#Example-2:-the-BB84-states-1","page":"Examples","title":"Example 2: the BB84 states","text":"","category":"section"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"Let's consider the four states + rangle -rangle 0rangle 1rangle.","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"p = [0.25, 0.25, 0.25, 0.25]\nρBs = dm.([ ketplus, ketminus, ketzero, ketone  ])\noutput = guesswork(p, ρBs; solver = get_sdp_solver());\noutput.optval","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"plot_pmfN(output)","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"Let's try the same example, but imposing a steep cost for the fourth guess.","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"c = [1.0, 2.0, 3.0, 5000.0]\noutput = guesswork(p, ρBs; c = c, solver = get_sdp_solver());\noutput.optval","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"We see that the average number of guesses to get a correct answer has gone up. However, inspecting the probability mass function for the number of guesses under the optimal strategy","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"plot_pmfN(output)","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"we see that the probability that the probability of guessing correctly on the fourth guess goes to almost zero.","category":"page"},{"location":"examples.html#Example-3:-two-copies-of-the-BB84-states-1","page":"Examples","title":"Example 3: two copies of the BB84 states","text":"","category":"section"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"Let us consider two tensor copies of the BB84 states:","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"p = ones(16)/16\nbb84 = GuessworkQuantumSideInfo.BB84_states()\nρBs = GuessworkQuantumSideInfo.iid_copies(bb84, 2)","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"In this case, there are 16 = 20922789888000 possible guessing orders, and hence 16 variables in the primal formulation of the SDP, or 16+1 constraints in the dual form of the SDP. In either case, we can't even fit them all into our computer's memory. Instead, we resort to bounds:","category":"page"},{"location":"examples.html#","page":"Examples","title":"Examples","text":"lb_output = guesswork_lower_bound(p, ρBs, solver = get_sdp_solver());\nlb_output.optval\n\nub_output = guesswork_upper_bound(p, ρBs; max_time = 30, make_solver = get_sdp_solver);\nub_output.optval","category":"page"},{"location":"index.html#","page":"Home","title":"Home","text":"CurrentModule = GuessworkQuantumSideInfo","category":"page"},{"location":"index.html#GuessworkQuantumSideInfo-1","page":"Home","title":"GuessworkQuantumSideInfo","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"","category":"page"},{"location":"index.html#Main-functions-1","page":"Home","title":"Main functions","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"GuessworkQuantumSideInfo.guesswork\nGuessworkQuantumSideInfo.guesswork_lower_bound\nGuessworkQuantumSideInfo.guesswork_upper_bound\nGuessworkQuantumSideInfo.pmfN","category":"page"},{"location":"index.html#GuessworkQuantumSideInfo.guesswork","page":"Home","title":"GuessworkQuantumSideInfo.guesswork","text":"guesswork(\n    p::AbstractVector{numeric_type},\n    ρBs::AbstractVector{<:AbstractMatrix};\n    solver,\n    K::Integer = length(p),\n    c = numeric_type[1:K..., 5_000],\n    dual::Bool = false,\n    remove_repetition::Bool = true,\n    povm_outcomes = make_povm_outcomes(length(p), K, remove_repetition),\n    verbose::Bool = true,\n    debug::Bool = false,\n)\n\nCompute the guesswork.\n\n\n\n\n\n","category":"function"},{"location":"index.html#GuessworkQuantumSideInfo.guesswork_lower_bound","page":"Home","title":"GuessworkQuantumSideInfo.guesswork_lower_bound","text":"guesswork_lower_bound(\n    p::AbstractVector{T},\n    ρBs::AbstractVector{<:AbstractMatrix};\n    solver,\n    c = T[1:length(p)..., 10_000],\n    verbose::Bool = false,\n)\n\nComputes a lower bound to the optimal expected number of guesses by relaxing the problem. For J states, only needs J^2 PSD variables subject to two linear constraints.\n\nGives e.g. 1.5 instead of 1.71 for BB84(1), and 2.5 for BB84(2), providing the current tightest lower bound to BB84(2) (we can get an upper bound of ~3.7 via dual relaxations). Doesn't seem like a great lower bound, but it does seem to perform better on random inputs (e.g. giving 1.91 instead of 1.98 in a four random qubit example.)\n\n\n\n\n\n","category":"function"},{"location":"index.html#GuessworkQuantumSideInfo.pmfN","page":"Home","title":"GuessworkQuantumSideInfo.pmfN","text":"pmfN(data; tol = 1e-5) -> Vector\n\nCompute the probability mass function for the number of guesses N, given a strategy. The nth entry of the output vector vec gives the probability for guessing the correct answer on the nth try, for n = 1 : K. The last entry gives the probability of never guessing the correct answer.\n\ndata should be a NamedTuple with entries for p, ρBs, Es, K, and povm_outcomes\ntol provides a tolerance above which to warn about imaginary or negative probabilities.\n\n\n\n\n\n","category":"function"},{"location":"index.html#Quantum-states-1","page":"Home","title":"Quantum states","text":"","category":"section"},{"location":"index.html#","page":"Home","title":"Home","text":"GuessworkQuantumSideInfo.randdm\nGuessworkQuantumSideInfo.randpure\nGuessworkQuantumSideInfo.randprobvec\nGuessworkQuantumSideInfo.BB84_states","category":"page"},{"location":"index.html#GuessworkQuantumSideInfo.randdm","page":"Home","title":"GuessworkQuantumSideInfo.randdm","text":"randdm(T, d)\n\nGenerates a density matrix of dimension d at random.\n\n\n\n\n\n","category":"function"},{"location":"index.html#GuessworkQuantumSideInfo.randpure","page":"Home","title":"GuessworkQuantumSideInfo.randpure","text":"randpure(T, d)\n\nGenerates a pure state density matrix of dimension d at random.\n\n\n\n\n\n","category":"function"},{"location":"index.html#GuessworkQuantumSideInfo.randprobvec","page":"Home","title":"GuessworkQuantumSideInfo.randprobvec","text":"randprobvec([T=Float64], d)\n\nGenerates points of type T, uniformly at random on the standard d-1 dimensional simplex using an algorithm by Smith and Tromble.\n\n\n\n\n\n","category":"function"},{"location":"index.html#GuessworkQuantumSideInfo.BB84_states","page":"Home","title":"GuessworkQuantumSideInfo.BB84_states","text":"BB84_states([T::Type = Float64])\n\nGenerates the BB84 states for use in guesswork or other functions. The numeric type can be optionally specified by the argument.\n\n\n\n\n\n","category":"function"}]
}
